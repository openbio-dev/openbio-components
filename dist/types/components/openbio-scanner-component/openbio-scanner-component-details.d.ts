import '../../stencil.core';
import WS from '../../utils/websocket';
export declare class OpenbioSignatureComponentDetails {
    ws: WS;
    private wsStatusInterval;
    private canvas?;
    private payload;
    componentContainer: HTMLStencilElement;
    detached: boolean;
    isTagComponent: boolean;
    tempPerson: any;
    imgTest: any;
    deviceReady: boolean;
    deviceOpened: boolean;
    backendSession: any;
    showLoader: boolean;
    isCapturing: boolean;
    model: string;
    brand: string;
    serial: string;
    deviceStatus: boolean;
    serviceConfigs: any;
    person: any;
    modal: any;
    form: any;
    deviceList: any;
    selectedDevice: string;
    formType: number;
    palmType: number;
    captureInput: HTMLInputElement;
    clearImages(): void;
    start(): void;
    capture(): Promise<void>;
    close(): void;
    open(): void;
    componentDidLoad(): void;
    componentDidUnload(): void;
    toggleFormModal(): void;
    clearRects(): void;
    loadForm(file: any): void;
    acceptData(): void;
    emitLoadInformation(): void;
    sendFingersInformation(finger: any): void;
    saveFingersToSession(): void;
    savePalmToSession(palm: any): void;
    insertPalm(palm: any): void;
    setDeviceSelection(event: any): void;
    setFormTypeSelection(event: any): void;
    setPalmarTypeSelection(event: any): void;
    setAutoNextSelection(event: any): void;
    resetForm(): void;
    closeFingerModal(): void;
    manualCrop(): void;
    screenUpdate(): void;
    canCapture(): boolean;
    canUpload(): boolean;
    showFingerSelectionRect(finger: any): void;
    fingerSelection(rightHand?: boolean): JSX.Element[];
    fingerResult(rightHand?: boolean): JSX.Element[];
    retryManualCrop(): void;
    getResult(): JSX.Element;
    isPalmCaptured(type: number): boolean;
    showModal(type: number): void;
    hideModal(): void;
    palmCaptures(): JSX.Element;
    render(): JSX.Element;
}
